version: "3.8"
services:
  web:
    build:
      context: ./services/web
    ports:
      - "5000:5000"
    volumes:
      - ./services/web/data:/usr/src/web/data
    environment:
      FLASK_ENV: ${FLASK_ENV}
      FLASK_APP: ${FLASK_APP}
      FLASK_RUN_HOST: ${FLASK_RUN_HOST}
      PUBLIC_API_VERSION: ${PUBLIC_API_VERSION}
      PUBLIC_ENVIRONMENT: ${PUBLIC_ENVIRONMENT}
      PUBLIC_LOG_LEVEL: ${PUBLIC_LOG_LEVEL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PUBLIC_POSTGRES_DB: ${PUBLIC_POSTGRES_DB}
      EXTERNAL_PUBLIC_SERVICE_URL: ${EXTERNAL_PUBLIC_SERVICE_URL}
    depends_on:
      - postgres_db
    command: sh -c './scripts/wait-for.sh postgres_db:5432 -t 60 -- flask run'
    networks:
      - chengdu
    container_name: web
    # restart: always

  postgres_db:
    image: postgres:13-alpine
    container_name: postgres_db
    ports:
      - "5432:5432"
    networks:
      - chengdu
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${PUBLIC_POSTGRES_DB}

  jupyterlab:
    build:
      context: ./services/jupyterlab
      args:
        CUSTOM_GITHUB_USER: ${CUSTOM_GITHUB_USER}
        CUSTOM_GITHUB_TOKEN: ${CUSTOM_GITHUB_TOKEN}
    image: jupyterlab_img
    container_name: jupyterlab
    volumes:
      - ./jupyterdata:/anaconda
    networks:
      - chengdu

  nginx:
    image: nginx:latest
    container_name: nginx
    # restart: always
    volumes:
      - ./services/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    depends_on:
      - web
    networks:
      - chengdu

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - chengdu

networks:
  chengdu:
    driver: bridge

volumes:
  postgres_data: