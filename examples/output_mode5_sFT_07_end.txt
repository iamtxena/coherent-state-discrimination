number alphas: 9
number_input_modes: 5
squeezing_option: False
[CSD] 0.0.1|DEBUG|2022-03-11 14:37:45]: Executing One Layer circuit with Backend: tf,  with measuring_type: probabilities 
batch_size:32 plays:1 modes:5 ancillas: 0 
steps: [100,150,300], l_rate: [0.1,0.01,0.01], cutoff_dim: [10,15,30] 
layers:1 squeezing: False
[CSD] 0.0.1|DEBUG|2022-03-11 14:37:45]: Optimizing for alpha: 0.67 with 16 codebooks.
[CSD] 0.0.1|DEBUG|2022-03-11 14:37:45]: current codebook: [[0.6687499999999998, 0.6687499999999998, 0.6687499999999998, 0.6687499999999998, 0.6687499999999998], [0.6687499999999998, 0.6687499999999998, 0.6687499999999998, -0.6687499999999998, 0.6687499999999998], [0.6687499999999998, 0.6687499999999998, -0.6687499999999998, 0.6687499999999998, 0.6687499999999998], [0.6687499999999998, 0.6687499999999998, -0.6687499999999998, -0.6687499999999998, 0.6687499999999998], [0.6687499999999998, -0.6687499999999998, 0.6687499999999998, 0.6687499999999998, 0.6687499999999998], [0.6687499999999998, -0.6687499999999998, 0.6687499999999998, -0.6687499999999998, 0.6687499999999998], [0.6687499999999998, -0.6687499999999998, -0.6687499999999998, 0.6687499999999998, 0.6687499999999998], [0.6687499999999998, -0.6687499999999998, -0.6687499999999998, -0.6687499999999998, 0.6687499999999998], [-0.6687499999999998, 0.6687499999999998, 0.6687499999999998, 0.6687499999999998, 0.6687499999999998], [-0.6687499999999998, 0.6687499999999998, 0.6687499999999998, -0.6687499999999998, 0.6687499999999998], [-0.6687499999999998, 0.6687499999999998, -0.6687499999999998, 0.6687499999999998, 0.6687499999999998], [-0.6687499999999998, 0.6687499999999998, -0.6687499999999998, -0.6687499999999998, 0.6687499999999998], [-0.6687499999999998, -0.6687499999999998, 0.6687499999999998, 0.6687499999999998, 0.6687499999999998], [-0.6687499999999998, -0.6687499999999998, 0.6687499999999998, -0.6687499999999998, 0.6687499999999998], [-0.6687499999999998, -0.6687499999999998, -0.6687499999999998, 0.6687499999999998, 0.6687499999999998], [-0.6687499999999998, -0.6687499999999998, -0.6687499999999998, -0.6687499999999998, 0.6687499999999998]]
[CSD] 0.0.1|DEBUG|2022-03-11 14:37:45]: Optimizing for alpha: 0.67 
codebook_size:16 plays:1 modes:5 ancillas: 0 
 steps: [100,150,300], l_rate: [0.1,0.01,0.01], cutoff_dim: [10,15,30] 
layers:1 squeezing: False
[CSD] 0.0.1|INFO|2022-03-11 14:37:45]: number of parameters: 30
[CSD] 0.0.1|DEBUG|2022-03-11 14:37:57]: Executing One Layer circuit with Backend: tf,  with measuring_type: probabilities 
batch_size:32 plays:1 modes:5 ancillas: 0 
steps: [100,150,300], l_rate: [0.1,0.01,0.01], cutoff_dim: [10,15,30] 
layers:1 squeezing: False
[CSD] 0.0.1|DEBUG|2022-03-11 14:37:57]: Optimizing for alpha: 0.91 with 16 codebooks.
[CSD] 0.0.1|DEBUG|2022-03-11 14:37:57]: current codebook: [[0.9124999999999999, 0.9124999999999999, 0.9124999999999999, 0.9124999999999999, 0.9124999999999999], [0.9124999999999999, 0.9124999999999999, 0.9124999999999999, -0.9124999999999999, 0.9124999999999999], [0.9124999999999999, 0.9124999999999999, -0.9124999999999999, 0.9124999999999999, 0.9124999999999999], [0.9124999999999999, 0.9124999999999999, -0.9124999999999999, -0.9124999999999999, 0.9124999999999999], [0.9124999999999999, -0.9124999999999999, 0.9124999999999999, 0.9124999999999999, 0.9124999999999999], [0.9124999999999999, -0.9124999999999999, 0.9124999999999999, -0.9124999999999999, 0.9124999999999999], [0.9124999999999999, -0.9124999999999999, -0.9124999999999999, 0.9124999999999999, 0.9124999999999999], [0.9124999999999999, -0.9124999999999999, -0.9124999999999999, -0.9124999999999999, 0.9124999999999999], [-0.9124999999999999, 0.9124999999999999, 0.9124999999999999, 0.9124999999999999, 0.9124999999999999], [-0.9124999999999999, 0.9124999999999999, 0.9124999999999999, -0.9124999999999999, 0.9124999999999999], [-0.9124999999999999, 0.9124999999999999, -0.9124999999999999, 0.9124999999999999, 0.9124999999999999], [-0.9124999999999999, 0.9124999999999999, -0.9124999999999999, -0.9124999999999999, 0.9124999999999999], [-0.9124999999999999, -0.9124999999999999, 0.9124999999999999, 0.9124999999999999, 0.9124999999999999], [-0.9124999999999999, -0.9124999999999999, 0.9124999999999999, -0.9124999999999999, 0.9124999999999999], [-0.9124999999999999, -0.9124999999999999, -0.9124999999999999, 0.9124999999999999, 0.9124999999999999], [-0.9124999999999999, -0.9124999999999999, -0.9124999999999999, -0.9124999999999999, 0.9124999999999999]]
[CSD] 0.0.1|DEBUG|2022-03-11 14:37:57]: Optimizing for alpha: 0.91 
codebook_size:16 plays:1 modes:5 ancillas: 0 
 steps: [100,150,300], l_rate: [0.1,0.01,0.01], cutoff_dim: [10,15,30] 
layers:1 squeezing: False
[CSD] 0.0.1|INFO|2022-03-11 14:37:57]: number of parameters: 30
[CSD] 0.0.1|DEBUG|2022-03-11 14:38:07]: Executing One Layer circuit with Backend: tf,  with measuring_type: probabilities 
batch_size:32 plays:1 modes:5 ancillas: 0 
steps: [100,150,300], l_rate: [0.1,0.01,0.01], cutoff_dim: [10,15,30] 
layers:1 squeezing: False
[CSD] 0.0.1|DEBUG|2022-03-11 14:38:07]: Optimizing for alpha: 1.16 with 16 codebooks.
[CSD] 0.0.1|DEBUG|2022-03-11 14:38:07]: current codebook: [[1.15625, 1.15625, 1.15625, 1.15625, 1.15625], [1.15625, 1.15625, 1.15625, -1.15625, 1.15625], [1.15625, 1.15625, -1.15625, 1.15625, 1.15625], [1.15625, 1.15625, -1.15625, -1.15625, 1.15625], [1.15625, -1.15625, 1.15625, 1.15625, 1.15625], [1.15625, -1.15625, 1.15625, -1.15625, 1.15625], [1.15625, -1.15625, -1.15625, 1.15625, 1.15625], [1.15625, -1.15625, -1.15625, -1.15625, 1.15625], [-1.15625, 1.15625, 1.15625, 1.15625, 1.15625], [-1.15625, 1.15625, 1.15625, -1.15625, 1.15625], [-1.15625, 1.15625, -1.15625, 1.15625, 1.15625], [-1.15625, 1.15625, -1.15625, -1.15625, 1.15625], [-1.15625, -1.15625, 1.15625, 1.15625, 1.15625], [-1.15625, -1.15625, 1.15625, -1.15625, 1.15625], [-1.15625, -1.15625, -1.15625, 1.15625, 1.15625], [-1.15625, -1.15625, -1.15625, -1.15625, 1.15625]]
[CSD] 0.0.1|DEBUG|2022-03-11 14:38:07]: Optimizing for alpha: 1.16 
codebook_size:16 plays:1 modes:5 ancillas: 0 
 steps: [100,150,300], l_rate: [0.1,0.01,0.01], cutoff_dim: [10,15,30] 
layers:1 squeezing: False
[CSD] 0.0.1|INFO|2022-03-11 14:38:07]: number of parameters: 30
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/usr/lib/python3.9/multiprocessing/pool.py", line 125, in worker
    result = (True, func(*args, **kwds))
  File "/usr/lib/python3.9/multiprocessing/pool.py", line 48, in mapstar
    return list(map(*args))
  File "/home/iamtxena/sandbox/coherent-state-discrimination/examples/parallel_experiments.py", line 147, in uncurry_launch_execution
    return launch_execution(configuration=one_execution_configuration)
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/utils/util.py", line 72, in wrap
    result = f(*args, **kw)
  File "/home/iamtxena/sandbox/coherent-state-discrimination/examples/parallel_experiments.py", line 123, in launch_execution
    return csd.execute(configuration=RunConfiguration({
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/utils/util.py", line 72, in wrap
    result = f(*args, **kw)
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/csd.py", line 195, in execute
    return self._train_and_test(training_result=training_result,
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/csd.py", line 253, in _train_and_test
    one_codebook_optimization_result = self._train_for_one_alpha_one_codebook()
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/utils/util.py", line 72, in wrap
    result = f(*args, **kw)
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/csd.py", line 531, in _train_for_one_alpha_one_codebook
    optimization_result = self._optimization.optimize(
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/optimize.py", line 46, in optimize
    return self._optimizer.optimize(cost_function=cost_function,
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/optimizers/tf.py", line 56, in optimize
    loss, parameters, measurements = self._tf_optimize(cost_function=cost_function,
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/optimizers/tf.py", line 115, in _tf_optimize
    loss, measurements = cost_function(params=parameters)
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/csd.py", line 153, in _cost_function
    return CostFunction(batch=Batch(size=0,
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/cost_function.py", line 95, in run_and_compute_average_batch_error_probability
    codeword_guesses=self._run_and_get_codeword_guesses())
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/cost_function.py", line 43, in _run_and_get_codeword_guesses
    return self._options.engine.run_tf_circuit_checking_measuring_type(
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/tf_engine.py", line 25, in run_tf_circuit_checking_measuring_type
    batch_success_probabilities = (self._run_tf_circuit_probabilities(circuit=circuit, options=options)
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/tf_engine.py", line 45, in _run_tf_circuit_probabilities
    return self._compute_tf_fock_probabilities_for_all_codewords(input_batch=options['input_batch'],
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/tf_engine.py", line 51, in _compute_tf_fock_probabilities_for_all_codewords
    return [self._compute_one_batch_codewords_success_probabilities(
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/tf_engine.py", line 51, in <listcomp>
    return [self._compute_one_batch_codewords_success_probabilities(
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/tf_engine.py", line 63, in _compute_one_batch_codewords_success_probabilities
    success_probabilities_all_outcomes = self._compute_success_probabilities_all_outcomes(
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/tf_engine.py", line 81, in _compute_success_probabilities_all_outcomes
    return [tf.reduce_sum(tf.math.multiply(measurement_matrix, self._all_fock_probs[index_input_batch]))
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/tf_engine.py", line 81, in <listcomp>
    return [tf.reduce_sum(tf.math.multiply(measurement_matrix, self._all_fock_probs[index_input_batch]))
  File "/home/iamtxena/environments/csd/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py", line 153, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File "/home/iamtxena/environments/csd/lib/python3.9/site-packages/tensorflow/python/framework/ops.py", line 7107, in raise_from_not_ok_status
    raise core._status_to_exception(e) from None  # pylint: disable=protected-access
tensorflow.python.framework.errors_impl.ResourceExhaustedError: failed to allocate memory [Op:Mul]
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/iamtxena/sandbox/coherent-state-discrimination/examples/parallel_experiments.py", line 351, in <module>
    multi_tf_backend(multiprocess_configuration=multiprocess_configuration)
  File "/home/iamtxena/sandbox/coherent-state-discrimination/examples/parallel_experiments.py", line 285, in multi_tf_backend
    _general_execution(multiprocess_configuration=multiprocess_configuration,
  File "/home/iamtxena/sandbox/coherent-state-discrimination/services/library/src/csd/utils/util.py", line 72, in wrap
    result = f(*args, **kw)
  File "/home/iamtxena/sandbox/coherent-state-discrimination/examples/parallel_experiments.py", line 225, in _general_execution
    execution_results = pool.map_async(func=uncurry_launch_execution,
  File "/usr/lib/python3.9/multiprocessing/pool.py", line 771, in get
    raise self._value
tensorflow.python.framework.errors_impl.ResourceExhaustedError: failed to allocate memory [Op:Mul]
