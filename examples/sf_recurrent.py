import strawberryfields as sf
from strawberryfields import ops
import numpy as np
from tensorflow import keras

# Number of layers of the Dolinar receiver. Selecting 4 as the most basic,
# non-trivial case.
num_layers = 4

# Number of quantum modes. Basic 2-mode case.
num_modes = 2

# Signal amplitude. Default is 1.0.
amplitude = 1.0

# Fock backend.
eng = sf.Engine("fock", backend_options={"cutoff_dim": 6})


def generate_nth_layer(layer_number, engine):
    """Generates the nth layer of the Dolinar receiver.
    Given the `layer_number` and `engine` as input, it returns a
    function that generates the necessary quantum circuit for the n-th layer of
    the Dolinar receiver.
    """

    # Need k values for the splits of the coherent state.
    amplitudes =  np.ones(num_layers) * (amplitude / num_layers)

    def quantum_layer(input_codeword, displacement_magnitudes_for_each_mode):
        program = sf.Program(num_modes)

        with program.context as q:
            # Prepare the coherent states for the layer. Appropriately scales
            # the amplitudes for each of the layers.
            for m in range(num_modes):
                sf.ops.Coherent(amplitudes[layer_number] * input_codeword[m]) | q[m]

            # Displace each of the modes by using the displacement magnitudes
            # generated by the ML backend.
            for m in range(num_modes):
                sf.Dgate(displacement_magnitudes_for_each_mode[m]) | q[m]

            # Perform measurements.
            sf.ops.MeasureFock() | q

        return engine.run(program)

    return quantum_layer


def generate_prediction_model(name=None):
    pass


if __name__ == '__main__':
    # ML model to predict the displacement magnitude for each of the layers of
    # the Dolinar receiver.
    model = generate_prediction_model(name="basic_model")

    # Layers of the Dolinar receiver.
    layers = [generate_nth_layer(n, model, eng) for n in range(num_layers)]

    # TODO: Add previous measurement to current layer and use it while calling the
    # predictor to obtain the new displacement values for the layer.

    # TODO: Add training loop.
