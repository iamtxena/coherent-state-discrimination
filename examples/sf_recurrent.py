import strawberryfields as sf
from strawberryfields import ops
import numpy as np
from tensorflow import keras

# Number of layers of the Dolinar receiver. Selecting 4 as the most basic,
# non-trivial case.
num_layers = 4

# Number of quantum modes. Basic 2-mode case.
num_modes = 2

# Signal amplitude. Default is 1.0.
amplitude = 1.0


# TODO: Add previous measurement to current layer and use it while calling the
# predictor to obtain the new displacement values for the layer.
def generate_nth_layer(layer_number, predictor):
    """Generates the nth layer of the Dolinar receiver.
    Given the `layer_number`, `total_number_of_layers` and `predictor` as input,
    it returns a function that generates the necessary quantum circuit for the
    n-th layer of the Dolinar receiver.

    This function should query the ML backend for the appropriate displacement
    magnitude using the predictor reference.
    """

    # Need k values for the splits of the coherent state.
    amplitudes =  np.ones(num_layers) * (amplitude / num_layers)

    # Use predictor to obtain estimates for displacement amplitudes.
    displacement_magnitudes_for_each_mode = None

    def quantum_layer(input_codeword, context):
        with context as q:
            # Prepare the coherent states for the layer.
            for m in range(num_modes):
                sf.ops.Coherent(amplitudes[layer_number] * input_codeword[m]) | q[m]

            # Displace each of the modes by using the displacement magnitudes
            # generated by the ML backend.
            for m in range(num_modes):
                sf.Dgate(displacement_magnitudes_for_each_mode[m]) | q[m]

            # TODO: Perform measurements.

    return quantum_layer

if __name__ == '__main__':
    # ML model to predict the displacement magnitude for each of the layers of
    # the Dolinar receiver.
    model = None

    # Layers of the Dolinar receiver.
    layers = [generate_nth_layer(n, model) for n in range(num_layers)]
