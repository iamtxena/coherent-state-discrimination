import time

import numpy as np
import strawberryfields as sf
from loguru import logger
from scipy.optimize import minimize
from tqdm import tqdm

from model_wrapper import LinearRegressionWrapper

# Number of layers of the Dolinar receiver. Selecting 4 as the most basic,
# non-trivial case.
NUM_LAYERS = 4

# Number of quantum modes. Basic 2-mode case.
NUM_MODES = 2

# Number of variables being optimized per mode.
NUM_VARIABLES = 1

# Signal amplitude. Default is 1.0.
SIGNAL_AMPLITUDE = 1.0

# Fock backend.
ENGINE = sf.Engine("fock", backend_options={"cutoff_dim": 6})

# Number of iterations to train for.
NUM_TRAINING_ITERATIONS = 500
MAX_ITERATIONS = 20

# Input and output sizes.
INPUT_VECTOR_SIZE = NUM_MODES * NUM_VARIABLES + NUM_LAYERS
OUTPUT_VECTOR_SIZE = NUM_MODES * NUM_VARIABLES

def generate_nth_layer(layer_number, engine):
    """Generates the nth layer of the Dolinar receiver.
    Given the `layer_number` and `engine` as input, it returns a
    function that generates the necessary quantum circuit for the n-th layer of
    the Dolinar receiver.
    """
    # Reset engine if a program has been executed.
    if engine.run_progs:
        engine.reset()

    # Need k values for the splits of the coherent state.
    amplitudes =  np.ones(NUM_LAYERS) * (SIGNAL_AMPLITUDE / NUM_LAYERS)

    def quantum_layer(input_codeword, displacement_magnitudes_for_each_mode):
        # logger.debug(f"{input_codeword =}")
        # logger.debug(f"{displacement_magnitudes_for_each_mode =}")

        program = sf.Program(NUM_MODES)

        mapping = {}
        params = {}

        for nth_mode in range(NUM_MODES):
            params[f"input_codeword_arg_{nth_mode}"] =  program.params(f"input_codeword_arg_{nth_mode}")
            mapping[f"input_codeword_arg_{nth_mode}"] = input_codeword[nth_mode]

            params[f"displacement_magnitudes_for_each_mode_arg_{nth_mode}"] =  program.params(f"displacement_magnitudes_for_each_mode_arg_{nth_mode}")
            mapping[f"displacement_magnitudes_for_each_mode_arg_{nth_mode}"] = displacement_magnitudes_for_each_mode[nth_mode]

        with program.context as q:
            # Prepare the coherent states for the layer. Appropriately scales
            # the amplitudes for each of the layers.
            for m in range(NUM_MODES):
                sf.ops.Coherent(amplitudes[layer_number] * params[f"input_codeword_arg_{m}"]) | q[m]

            # Displace each of the modes by using the displacement magnitudes
            # generated by the ML backend.
            for m in range(NUM_MODES):
                sf.ops.Dgate(params[f"displacement_magnitudes_for_each_mode_arg_{m}"]) | q[m]

            # Perform measurements.
            sf.ops.MeasureFock() | q

        return engine.run(program, args=mapping)

    return quantum_layer


def generate_random_codeword():
    """
    Generates a random codeword for `NUM_MODES` modes.
    """
    return np.random.choice([-1, +1], size=NUM_MODES)


def loss_metric(prediction, target):
    """
    Computes the numerical loss incurred on generating `prediction` instead of
    `target`.
    Both `prediction` and `target` are tensors.
    """
    true_tensor = np.ones((NUM_MODES))
    false_tensor = np.zeros((NUM_MODES))

    indices_where_input_codeword_was_minus = np.where(target == -1, true_tensor, false_tensor)
    indices_where_measurement_is_not_positive = np.where(prediction <= 0, true_tensor, false_tensor)

    indices_where_input_codeword_was_plus = np.where(target == +1, true_tensor, false_tensor)
    indices_where_measurement_is_not_negative = np.where(prediction >= 0, true_tensor, false_tensor)

    combined_indices_1 = np.logical_and(
        indices_where_input_codeword_was_minus,
        indices_where_measurement_is_not_positive
    )

    combined_indices_2 = np.logical_and(
        indices_where_input_codeword_was_plus,
        indices_where_measurement_is_not_negative
    )

    combined_indices = np.logical_or(combined_indices_1, combined_indices_2)
    sum_of_combined_indices = np.sum(np.sum(combined_indices))

    return sum_of_combined_indices / NUM_MODES

def training_error(weights, target, input_vector, layer_number):
    global model, layers, previous_predictions

    model.set_learnable_parameteres_from_flattended_list(weights)
    predicted_displacements = model(input_vector)

    measurement_of_nth_layer = layers[layer_number](
        target,
        2 * SIGNAL_AMPLITUDE * predicted_displacements)

    prediction = measurement_of_nth_layer.samples[0]
    previous_predictions = prediction
    # logger.debug(f"{prediction = }, {target = }")

    error = loss_metric(prediction, target)
    # logger.debug(f"{error = }")

    return error

def train():
    """
    Runs a single step of optimization for a single value of alpha across all
    layers of the Dolinar receiver.
    """
    global model, previous_predictions

    previous_predictions = np.random.normal(size=NUM_MODES * NUM_VARIABLES)

    input_codeword = generate_random_codeword()

    for nth_layer in range(NUM_LAYERS):
        # logger.debug(f"Optimising for layer {nth_layer + 1} of {NUM_LAYERS}")

        one_hot_layer_vector = np.zeros(NUM_LAYERS)
        one_hot_layer_vector[nth_layer] = 1

        input_vector = np.concatenate([previous_predictions, one_hot_layer_vector])
        input_vector = np.expand_dims(input_vector, 0)

        result = minimize(
            training_error,
            model.get_learnable_parameters_as_flattened_list(),
            (
                input_codeword,
                input_vector,
                nth_layer
            ),
            options={'maxiter': MAX_ITERATIONS}
        )

        model.set_learnable_parameteres_from_flattended_list(result.x)

if __name__ == '__main__':
    # ML model to predict the displacement magnitude for each of the layers of
    # the Dolinar receiver.
    logger.info("Building model.")
    model = LinearRegressionWrapper(
        input_size=INPUT_VECTOR_SIZE,
        output_size=OUTPUT_VECTOR_SIZE
    )
    logger.info("Done.")

    # Layers of the Dolinar receiver.
    logger.info("Building quantum circuits.")
    layers = [generate_nth_layer(n, ENGINE) for n in range(NUM_LAYERS)]
    logger.info("Done.")

    # Global tracker.
    previous_predictions = None

    # Training loop.
    logger.info("Begin training.")
    start = time.time()
    for _ in tqdm(range(NUM_TRAINING_ITERATIONS)):
        train()
    end = time.time()
    elapsed = (end - start) / 60.0
    print(f"Training took {elapsed} seconds.")
